"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.run = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _process = _interopRequireDefault(require("process"));

var _path = _interopRequireDefault(require("path"));

var _yargs = _interopRequireDefault(require("yargs"));

var _launcher = _interopRequireDefault(require("./launcher"));

var _run = require("./commands/run");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const SUPPORTED_COMMANDS = ['config', 'install', 'repl', 'run'];
const DEFAULT_CONFIG_FILENAME = 'wdio.conf.js';

const run = async () => {
  const argv = _yargs.default.commandDir('commands').help();

  if (!_process.default.argv.find(arg => arg === '--help')) {
    for (const [name, param] of Object.entries(_run.builder)) {
      argv.option(name, param);
    }
  }

  const params = _objectSpread({}, argv.argv);

  if (!params._.find(param => SUPPORTED_COMMANDS.includes(param))) {
    params.configPath = _path.default.join(_process.default.cwd(), params._[0] || DEFAULT_CONFIG_FILENAME);

    params._.push(_fs.default.existsSync(params.configPath) ? 'run' : 'config');

    return (0, _run.handler)(params);
  }
};

exports.run = run;
var _default = _launcher.default;
exports.default = _default;